<!doctype html>
<html>
<head>
    <title>My Phaser Game</title>
</head>
<body>
<script src="assets/phaser.min.js"></script>
<script>

    var game = new Phaser.Game(
        800, // The width of our game
        600, // The height of our game
        Phaser.AUTO,  // The structure
        '',  // The id of element to place game
        { preload: preload, create: create, update: update }  // The game properties: methodName
    );

    function preload() {
    
        // load images('assetKey', 'location')
        game.load.image('sky', 'assets/sky.png');
        game.load.image('ground', 'assets/platform.png');
        game.load.image('star', 'assets/star.png');
        game.load.spritesheet('dude', 'assets/dude.png', 32, 48);
    }
    
    var player;
    var platforms;
    var cursors;
    var stars;
    var score = 0;
    var scoreText;

    function create() {
    
        //  We're going to be using physics, so enable the Arcade Physics system
        game.physics.startSystem(Phaser.Physics.ARCADE);
    
        // A simple background for our game
        game.add.sprite(0, 0, 'sky');
        
        // add some little stars (x, y, 'name')
        // game.add.sprite(100, 100, 'star');
        // game.add.sprite(300, 100, 'star');
        // game.add.sprite(140, 200, 'star');
    
        //  The platforms group contains the ground and the 2 ledges we can jump on
        platforms = game.add.group();
    
        //  We will enable physics for any object that is created in this group
        platforms.enableBody = true;
    
        // Here we create the floor from 'ground'.
        var floor = platforms.create(0, game.world.height - 64, 'ground');
    
        //  Scale floor fit the width of the game (the original sprite is 400x32 in size)
        floor.scale.setTo(2, 2);
    
        //  This stops it from falling away when you jump on it
        floor.body.immovable = true;
    
        //  Now let's create two ledges also from 'ground'
        var ledge1 = platforms.create(400, 400, 'ground');
        var ledge2 = platforms.create(-150, 250, 'ground');
    
        //  Make them immovable as well
        ledge1.body.immovable = true;    
        ledge2.body.immovable = true;
    
        // The player and its settings
        player = game.add.sprite(32, game.world.height - 450, 'dude');
    
        //  We need to enable physics on the player
        game.physics.arcade.enable(player);
    
        //  Player physics properties. Give the little guy a slight bounce.
        player.body.bounce.y = 0.2;
        player.body.gravity.y = 300;

        // Player collides with world to avoid walking off camera
        player.body.collideWorldBounds = true;
    
        //  Our two animations, walking left and right.
        player.animations.add('left', [0, 1, 2, 3], 10, true);
        player.animations.add('right', [5, 6, 7, 8], 10, true);
    
        //  Finally some stars to collect
        stars = game.add.group();
    
        //  We will enable physics for any star that is created in this group
        stars.enableBody = true;
    
        //  Here we'll create 12 of them evenly spaced apart
        for (var i = 0; i < 12; i++)
        {
            //  Create a star inside of the 'stars' group
            var star = stars.create(i * 70, 0, 'star');
    
            //  Let gravity do its thing
            star.body.gravity.y = 300;
    
            //  This just gives each star a slightly random bounce value
            star.body.bounce.y = 0.7 + Math.random() * 0.2;
        }
    
        //  The score
        scoreText = game.add.text(16, 16, 'Score: 0', { fontSize: '32px', fill: '#000' });
    
        //  Our controls.
        cursors = game.input.keyboard.createCursorKeys();
    }

    function update() {
    
        //  Collide the player and the stars with the platforms
        game.physics.arcade.collide(player, platforms);
        //  stars group also collides with platforms
        game.physics.arcade.collide(stars, platforms);
    
        //  Checks to see if the player overlaps with any of the stars, if he does call the collectStar function
        game.physics.arcade.overlap(player, stars, collectStar, null, this);
    
        //  Reset the players velocity (movement)
        player.body.velocity.x = 0;
    
        if (cursors.left.isDown)
        {
            //  Move to the left
            player.body.velocity.x = -150;
    
            player.animations.play('left');
        }
        else if (cursors.right.isDown)
        {
            //  Move to the right
            player.body.velocity.x = 150;
    
            player.animations.play('right');
        }
        else
        {
            //  Stand still
            player.animations.stop();
    
            player.frame = 4;
        }
        
        //  Allow the player to jump if they are touching the ground.
        if (cursors.up.isDown && player.body.touching.down)
        {
            player.body.velocity.y = -350;
        }
    }
    
    function collectStar (player, star) {
        
        // Removes the star from the game
        star.kill();
    
        //  Add and update the score
        score += 10;
        scoreText.text = 'Score: ' + score;
    
    }

</script>
</body>
</html>